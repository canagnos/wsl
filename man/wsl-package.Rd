% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/library_weak.R
\docType{package}
\name{wsl-package}
\alias{wsl}
\alias{wsl-package}
\title{Weakly Supervised Learning}
\description{
Weakly supervised learning for R. It currently uses a re-formulation of the weakly supervised paradigm into weighted learning to take advantage of existing R interfaces.
}
\details{
Weakly supervised learning is a framework for handling multiple noisy incomplete labels, typically generated from a number of labelling heuristics produced by an expert whose intention is to produce noisy labels on a potentially small subset of the available examples. Ground truth can also be accommodated where available. The main function is \code{basic_optimiser} which estimates the accuracy of the labelling heuristics in an unsupervised fashion, under the assumption that any errors in the heuristics are uncorrelated. The proposed framework allows for the use of weighted learning as an approximation to noisy label learning. This is achieved by the function \code{transform_weak_data}.
}
\examples{
# We first simulate 1000 samples from a logistic regression
n = 1000
p = 10
seed = 11
data_obj = simulate_logreg(ntrain=n/2, p=p, betav = 1)

# We now simulate the production of weak labels using simulate_lambda
# by adding noise and missingness to the ground truth labels

lf_obj = simulate_lambda(
  accuracy_true = c(0.6, 0.9, 0.65, 1), # last column is ground truth
  coverage_true = c(0.1,0.1,0.1,0.05),
  labels_true = data_obj$data$Y*2-1 # we map [0,1] to [-1,0,1]
)

# Our main object of interest is the matrix of weak labels, Lambda:

head(lf_obj$Lambda)

# Our first task is to estimate the accuracy and coverage parameters from the data
# We can do this without using ground truth at all:

mle_accuracies_unsupervised = basic_optimiser(
  lf_obj$Lambda[, 1:3], ground_truth = FALSE,
  maxiters = 10 # increase to 100, this was set small for package testing reasons
)

# or we can use some ground truth in a semi-supervised manner:

mle_accuracies_semisupervised = basic_optimiser(
  lf_obj$Lambda,
  maxiters = 10, # increase to 100, this was set small for package testing reasons
  ground_truth = TRUE
)

# Armed with maximum likelihood estimates of coverage and accuracy, we can now convert
# the weak labels to a larger dataset by converting accuracy to example weights.
# We use first the estimate produced by the semi-supervised maximum likelihood estimation,
# and the covariates from the training dataset produced by our data simulator at the start:

weak_data_semisupervised = transform_weak_data(
  X = data_obj$data[, -(p+1)],
  Lambda = lf_obj$Lambda,
  accuracies = mle_accuracies_semisupervised$a_hat
)

# And now repeat for the MLEs produced without ground truth:

weak_data_unsupervised = transform_weak_data(
  X = data_obj$data[, -(p+1)],
  Lambda = lf_obj$Lambda,
  accuracies = mle_accuracies_unsupervised$a_hat
)

# We may now use any classifier that supports example weights.
# With very little work the standard R logistic regression package
# may be used to handle example weights. We use a wrapper provided by the wsl package:

weak_fit_semisupervised = fit_logistic(
  data = weak_data_semisupervised$dataweak,
  weights = weak_data_semisupervised$weights
)
weak_fit_unsupervised = fit_logistic(
  data = weak_data_unsupervised$dataweak,
  weights = weak_data_unsupervised$weights
)

# We now deploy both models on the test dataset:

output_weak_fit_semisupervised = predict_logistic(
  weak_fit_semisupervised,
  data_obj$newdata
)
output_weak_fit_unsupervised = predict_logistic(
  weak_fit_unsupervised,
  data_obj$newdata
)

# For comparison purposes, we also fit a logistic regression on the ground truth data, too:

ground_truth_fit = fit_logistic(data_obj$data)
output_ground_truth_fit = predict_logistic(ground_truth_fit, data_obj$newdata)

# We can now compare performance, e.g., by using the hmeasure package:
library(hmeasure)
scores = data.frame(
  TL = output_ground_truth_fit$scores,
  WTL_MLE = output_weak_fit_semisupervised$scores, # weak and true labels
  WL_MLE = output_weak_fit_unsupervised$scores # only weak labels
)
hmeasure_obj = HMeasure(scores = scores, true.class = data_obj$newdata$Y)
plotROC(hmeasure_obj)
}

